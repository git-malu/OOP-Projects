package client.clientModel.task;

import java.rmi.RemoteException;

import provided.client.model.taskUtils.ITaskFactory;
import provided.compute.ILocalTaskViewAdapter;
import provided.compute.ITask;
import provided.compute.ITaskResultFormatter;

public class Sqroot implements ITask<Double> {

	/**
	 * SerialversionUID for well-defined serialization.
	 */
	private static final long serialVersionUID = -8426157068995623016L;
	
	/**
	 * Adapter to the local view. Marked "transient" so that it is not serialized
	 * and instead is re-attached at the destination (the server).
	 */
	private transient ILocalTaskViewAdapter taskView = ILocalTaskViewAdapter.DEFAULT_ADAPTER;

	/**
	 * digits of precision after the decimal point
	 */
	private final int doubleDigits;

	public Sqroot(int doubleDigits) {
		// TODO Auto-generated constructor stub
		this.doubleDigits = doubleDigits;
		taskView.append("Square Root constructing...");
	}

	private Double computeSqrt(int doubleDigits) {
		double left = 0.0;
		double right = (double) doubleDigits;
		double eps = 1e-12;

		if (right < 1.0) {
			right = 1.0;
		}

		while (right - left > eps) {
			double mid = (right + left) / 2;
			if (mid * mid < doubleDigits) {
				left = mid;
			} else {
				right = mid;
			}
		}

		return left;
	}

	@Override
	public Double execute() throws RemoteException {
		// TODO Auto-generated method stub
		taskView.append("Sqroot task called with input = " + doubleDigits + "\n");
		return computeSqrt(doubleDigits);
	}

	@Override
	public void setTaskViewAdapter(ILocalTaskViewAdapter viewAdapter) {
		// TODO Auto-generated method stub
		taskView = viewAdapter;
		viewAdapter.append("Square Root task installed!\n");
	}

	@Override
	public ITaskResultFormatter<Double> getFormatter() {
		// TODO Auto-generated method stub
		return new ITaskResultFormatter<Double>() {
			public String format(Double result) {
				return "Square Root: " + result + "  (input = " + doubleDigits + ")";
			}
		};
	}
	
	/**
	 * An ITaskFactory for this task
	 */
	public static final ITaskFactory<Double> FACTORY = new ITaskFactory<Double>() {

		@Override
		public ITask<Double> make(String param) {
			return new Sqroot(Integer.parseInt(param));
		}
		
		@Override
		public String toString() {
			return Sqroot.class.getName();
		}
		
	};	

}
