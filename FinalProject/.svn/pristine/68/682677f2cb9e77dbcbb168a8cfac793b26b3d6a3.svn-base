package lm44_xw47.chatRoom.view;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;

import common.IChatRoom;
import common.IUser;
import gov.nasa.worldwindx.examples.HelloWorldWind;

/**
 * Following defines the view of the lobby.
 * 
 * @author Xiaojun Wu
 * @author Lu Ma
 */
public class LobbyView extends JFrame {

	/**
	 * An auto-generated id for serialization.
	 */
	private static final long serialVersionUID = -1059209993763003372L;
	
	/**
	 * The panel uses to contain content.
	 */
	private JPanel contentPane;
	
	/**
	 * The panel uses to contain control component.
	 */
	private final JPanel pnlCtrl = new JPanel();
	
	/**
	 * The text field uses to enter team name.
	 */
	private final JTextField teamNameTextField = new JTextField();
	
	/**
	 * The button uses to create a team.
	 */
	private final JButton btnCreateTeam = new JButton("Create Team");
	
	/**
	 * The panel uses to contain team view.
	 */
	private final JPanel pnlTeam = new JPanel();
	
	/**
	 * The panel uses to contain game view.
	 */
	private final JPanel pnlGame = new JPanel();
	
	/**
	 * The panel uses to contain team info.
	 */
	private final JPanel pnlTeamInfo = new JPanel();
	
	/**
	 * The drop list that contains teams.
	 */
	private final JComboBox<IChatRoom> comboBoxTeam = new JComboBox<IChatRoom>();
	
	/**
	 * The button uses to join a team.
	 */
	private final JButton btnJoin = new JButton("Join");
	
	/**
	 * The drop list that contains users.
	 */
	private final JComboBox<IUser> comboBoxInvite = new JComboBox<IUser>();
	
	/**
	 * The button uses to invite a user.
	 */
	private final JButton btnInvite = new JButton("Invite");
	
	/**
	 * The button uses to quit the game lobby.
	 */
	private final JButton btnQuit = new JButton("Quit");
	
	/**
	 * The button uses to tell the server I am ready.
	 */
	private final JButton btnReady = new JButton("Ready");
	
	/**
	 * The adapter the lobby view uses to communicate with lobby model.
	 */
	private ILobbyView2ModelAdapter lobbyView2ModelAdapter = ILobbyView2ModelAdapter.NULL_OBJECT;

	/**
	 * Constructor.
	 * 
	 * @param lobbyView2ModelAdapter The adapter the lobby view uses to communicate with lobby model.
	 */
	public LobbyView(ILobbyView2ModelAdapter lobbyView2ModelAdapter) {
		this.lobbyView2ModelAdapter = lobbyView2ModelAdapter;
		init();
	}
	
	/**
	 * Initialize.
	 */
	public void init() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 600, 300);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		contentPane.setLayout(new BorderLayout(0, 0));
		setContentPane(contentPane);
		
		contentPane.add(pnlCtrl, BorderLayout.NORTH);
		
		teamNameTextField.setToolTipText("Enter the name of your created team right here.");
		teamNameTextField.setText("Team1");
		teamNameTextField.setColumns(10);
		
		pnlCtrl.add(teamNameTextField);
		btnCreateTeam.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				String teamname = teamNameTextField.getText();
				if (teamname == null || teamname.length() == 0) {
					return;
				}
				lobbyView2ModelAdapter.createTeam(teamname);
			}
		});
		btnCreateTeam.setToolTipText("Click to create your team.");
		
		pnlCtrl.add(btnCreateTeam);
		
		pnlCtrl.add(pnlTeamInfo);
		pnlTeamInfo.setLayout(new GridLayout(0, 1, 0, 0));
		comboBoxTeam.setToolTipText("Select team.");
		pnlTeamInfo.add(comboBoxTeam);
		btnJoin.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				IChatRoom team = comboBoxTeam.getItemAt(comboBoxTeam.getSelectedIndex());
				if (team == null) {
					return;
				}
				lobbyView2ModelAdapter.joinTeam(team);
			}
		});
		btnJoin.setToolTipText("Click to join the selected team.");
		pnlTeamInfo.add(btnJoin);
		comboBoxInvite.setToolTipText("Select user your want to invite.");
		
		pnlTeamInfo.add(comboBoxInvite);
		btnInvite.setToolTipText("Invite a user to your team.");
		
		pnlTeamInfo.add(btnInvite);
		btnQuit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lobbyView2ModelAdapter.quit();
			}
		});
		
		btnReady.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lobbyView2ModelAdapter.readyToPlay();
			}
		});
		
		pnlCtrl.add(btnReady);
		btnQuit.setToolTipText("Click button to quit the game.");
		
		pnlCtrl.add(btnQuit);
		
		contentPane.add(pnlTeam, BorderLayout.WEST);
		
		contentPane.add(pnlGame, BorderLayout.CENTER);
		pnlGame.setLayout(new BorderLayout(0, 0));
	}
	
	/**
	 * Add team view.
	 * 
	 * @param view The view of team.
	 */
	public void addTeamView(Component view) {
		pnlTeam.add(view);
	}
	
	/**
	 * Add user to user drop list.
	 * 
	 * @param user The user being added to user drop list.
	 */
	public void addUser(IUser user) {
		// comboBoxInvite.addItem(user);
	}
	
	/**
	 * Add team to team drop list.
	 * 
	 * @param team The team being added to team drop list.
	 */
	public void addTeam(IChatRoom team) {
		comboBoxTeam.addItem(team);
	}
	
	/**
	 * Remove team view.
	 * 
	 * @param view The view of team.
	 */
	public void removeTeamView(Component view) {
		pnlTeam.removeAll();
	}
	
	/**
	 * Remove user from user drop list.
	 * 
	 * @param user The user being removed from user drop list.
	 */
	public void removeUser(IUser user) {
		comboBoxInvite.removeItem(user);
	}
	
	/**
	 * Remove team from team drop list.
	 * 
	 * @param team The team being removed from team drop list.
	 */
	public void removeTeam(IChatRoom team) {
		comboBoxTeam.removeItem(team);
	}
	
	/**
	 * Get game panel.
	 * 
	 * @return The game panel.
	 */
	public JPanel getPnlGame() {
		return pnlGame;
	}
	
	/**
	 * Set the lobby view visible.
	 */
	public void start() {
		this.setVisible(true);
	}

}
