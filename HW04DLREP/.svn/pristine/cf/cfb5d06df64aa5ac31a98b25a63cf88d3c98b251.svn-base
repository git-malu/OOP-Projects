package model.strategy;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.MediaTracker;
import java.awt.Toolkit;
import java.awt.geom.AffineTransform;
import java.awt.image.ImageObserver;

import model.Ball;

public class ImagePaintStrategy extends APaintStrategy {
  
//  public ImagePaintStrategy(AffineTransform at) {
//    super(at);
//    // TODO Auto-generated constructor stub
//  }

  private double fillFactor;
  private Image img;
  private ImageObserver imageObs;
  protected AffineTransform localAT = new AffineTransform();
  private double scaleFactor;
  protected AffineTransform tempAT;
  
  public ImagePaintStrategy(AffineTransform at, String filename, double fillFactor) {
    super(at);
    
    try {
      img = Toolkit.getDefaultToolkit().getImage(this.getClass().getResource(filename));
    }
    catch (Exception e){
      System.err.println("ImagePaintStrategy: Error reading file: "+filename +"\n"+e);
    }
    this.tempAT = at;
    this.fillFactor = fillFactor;
    
  }
  
  public void init(Ball host) {
    imageObs = host.getContainer();
    MediaTracker mt = new MediaTracker(host.getContainer());
    mt.addImage(img, 1);
    try {
      mt.waitForAll();
    }
    catch(Exception e){
      System.out.println("ImagePaintStrategy.init(): Error waiting for image.  Exception = "+e);
    }

    scaleFactor = 2.0/(fillFactor*(img.getWidth(imageObs)+img.getHeight(imageObs))/2.0);
  }
  
  public ImagePaintStrategy(java.lang.String filename, double fillFactor) {
    super(new AffineTransform());
    
//    AffineTransform at = new AffineTransform();
    try {
      img = Toolkit.getDefaultToolkit().getImage(this.getClass().getResource(filename));
    }
    catch (Exception e){
      System.err.println("ImagePaintStrategy: Error reading file: "+filename +"\n"+e);
    }
//    this.tempAT = at;
    this.fillFactor = fillFactor;
    
    
  }

  @Override
  void paintXfrm(Graphics g, Ball host, AffineTransform at) {
    // TODO Auto-generated method stub
    localAT.setToScale(scaleFactor, scaleFactor);
    localAT.translate(-img.getWidth(imageObs)/2.0, -img.getHeight(imageObs)/2.0);
    localAT.preConcatenate(at);
    ((Graphics2D)g).drawImage(img, localAT, imageObs); 
  }

}
