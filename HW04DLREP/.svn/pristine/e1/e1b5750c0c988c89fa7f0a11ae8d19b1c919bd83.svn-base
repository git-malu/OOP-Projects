package model.strategy;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.awt.geom.AffineTransform;

import model.Ball;

public class ShapePaintStrategy extends APaintStrategy{
	
	/*
	 * shape to be painted
	 * initialized by constructor
	 */
	private Shape shape; 
	
	ShapePaintStrategy(Shape shape){
		this(new AffineTransform(), shape);
	}
	//base constructor
	ShapePaintStrategy(AffineTransform at, Shape shape){
		super(at);
		this.shape = shape;
	}
	
	@Override
	void paintXfrm(Graphics g, Ball host, AffineTransform at) {
		// TODO Auto-generated method stub
//		Shape s = at.createTransformedShape(shape);
//		Rectangle bounds = s.getBounds();
//		at.setToIdentity();
//		at.setToTranslation(bounds.getWidth()*0.5, bounds.getHeight()*0.5);
		((Graphics2D) g).fill(at.createTransformedShape(shape));// fill -- final paint
		
	}
	
	public void paintCfg(Graphics g, Ball host) {
//		Point v = host.getVelocity();
//		Point l = host.getLocation();
//		Point s = host.getSize();
//		if(host.bounce_counter == 1) {
//			if(v.x> 0) {
//				if(l.x - v.x*2<0) {
//					l.x -= s.x;
//				}
//			}else if(l.x - v.x*2>0) {
//				l.x += s.x;
//			}
//			
//			if(v.y> 0) {
//				if(l.y - v.y*2<0) {
//					l.y -= s.y;
//				}
//			}else if(l.y - v.y*2>0) {
//				l.y += s.y;
//			}
////			host.bounce_counter = 0;
//		}
//		host.setLocation(l);
//		host.setVelocity(v);
		
		
		
	}

}
