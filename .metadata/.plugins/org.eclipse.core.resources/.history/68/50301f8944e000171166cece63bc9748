package lm44_xw47.model;

import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Collection;
import java.util.HashSet;

import javax.swing.JOptionPane;

import common.IChatRoom;
import common.IReceiver;
import common.IUser;
import provided.rmiUtils.IRMI_Defs;
import provided.rmiUtils.RMIUtils;

/**
 * Following defines the main model for this application.
 * 
 * @author Lu Ma
 * @author Xiaojun Wu
 */
public class MainModel {
	/**
	 * The adapter this model uses to communicate with view.
	 */
	private IMainModel2ViewAdapter _mainModel2ViewAdapter;

	/**
	 * The user of this application.
	 */
	private User meUser;

	/**
	 * The stub for user of this application.
	 */
	private IUser userStub;

	/**
	 * The username of local user.
	 */
	private String username = "";

	/**
	 * RMI utilities for starting RMI and for getting the Registry
	 */
	private RMIUtils rmiUtils;

	/**
	 * The registry that receive that registration from server object stub.
	 */
	private Registry registry;

	/**
	 * 
	 */
	private int port = 2050;

	private int receiverPort = 2060;

	private Collection<IReceiver> receivers = new HashSet<IReceiver>();

	/**
	 * Constructor.
	 * 
	 * @param adapter The adapter this model uses to communicate with view.
	 */
	public MainModel(IMainModel2ViewAdapter adapter) {
		_mainModel2ViewAdapter = adapter;
	}

	/**
	 * Start the model.
	 */
	public void start() {
		try {
			// Start the RMI system and get the local Registry, making it if necessary.
			rmiUtils = new RMIUtils((String str) -> {
				_mainModel2ViewAdapter.appendLog(str);
			});

			rmiUtils.startRMI(IRMI_Defs.CLASS_SERVER_PORT_SERVER);
			registry = rmiUtils.getLocalRegistry();

			//save it to prevent garbage collection
			meUser = new User(JOptionPane.showInputDialog("Input a username:"));
			username = meUser.getName();
			//save it to prevent garbage collection
			userStub = (IUser) UnicastRemoteObject.exportObject(meUser, port);
			//bind to the registry
			registry.rebind(IUser.BOUND_NAME, userStub);
			meUser.init(this._mainModel2ViewAdapter.createUserCmd2ModelAdapter(), userStub);
			_mainModel2ViewAdapter.appendLog("RMI Server Ready");

		} catch (Exception e) {
			System.err.println("Exception while intializing RMI: \n" + e);
			e.printStackTrace();
			System.exit(-1); // exit the program.
		}
	}

	public IReceiver[] joinChatRoom(IChatRoom chatRoom) {
		IReceiver[] receiverChatRoom = new IReceiver[2];
		IReceiver receiver = new Receiver(userStub);
		receivers.add(receiver);
		try {
			IReceiver receiverStub = (IReceiver) UnicastRemoteObject.exportObject(receiver, receiverPort++);
			registry.rebind("Receiver", receiverStub);
			receiverChatRoom[0] = receiver;
			receiverChatRoom[1] = receiverStub;
			return receiverChatRoom;
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}

	}

	/**
	 * Connect the remote user by the given ip address.
	 * 
	 * @param ip The ip address of remote user.
	 * @return The stub of remote user.
	 */
	public IUser connect(String ip) {
		try {
			Registry remoteRegistry = rmiUtils.getRemoteRegistry(ip);
			IUser remoteUserStub = (IUser) remoteRegistry.lookup(IUser.BOUND_NAME);
			remoteUserStub.connect(userStub);
			return remoteUserStub;

		} catch (RemoteException | NotBoundException e) {
			e.printStackTrace();
			return null;
		}
	}

	public String getUsername() {
		return username;
	}

	public IUser getUser() {
		return userStub;
	}
}
