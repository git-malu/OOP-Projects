package lm44_xw47.model;

import java.util.ArrayList;

import gov.nasa.worldwind.geom.Position;
import gov.nasa.worldwind.render.Material;
import gov.nasa.worldwind.render.markers.BasicMarker;
import gov.nasa.worldwind.render.markers.BasicMarkerAttributes;
import gov.nasa.worldwind.render.markers.BasicMarkerShape;
import gov.nasa.worldwind.render.markers.Marker;
import gov.nasa.worldwind.render.markers.MarkerAttributes;

/**
 * ball model used in the game
 * @author Lu Ma
 * @author Xiaojun Wu
 *
 */
public class Ball {
	
	/**
	 * ball marker that displayed on the map
	 */
	Marker ballMarker = new BasicMarker(Position.fromDegrees(0, 180, 4000), markerAttrs[10]);
	/**
	 * moving destination of the ball
	 */
	Position destination = Position.fromDegrees(0, 180, 0);
	ArrayList<Marker> markers = new ArrayList<Marker>();
	int ballState = 0; // 0 static; 1 carried; 2 flying
	public static int FLY = 2;
	public static int CARRIED = 1;
	public static int STOP = 0;
	Player carrier = null;
	
	/**
	 * marker attributes
	 */
	private static final MarkerAttributes[] markerAttrs = new BasicMarkerAttributes[]
            {
                new BasicMarkerAttributes(Material.BLACK, BasicMarkerShape.SPHERE, 1d, 10, 5),
                new BasicMarkerAttributes(Material.MAGENTA, BasicMarkerShape.CUBE, 1d, 10, 5),
                new BasicMarkerAttributes(Material.YELLOW, BasicMarkerShape.CONE, 1d, 10, 5),
                new BasicMarkerAttributes(Material.LIGHT_GRAY, BasicMarkerShape.CYLINDER, 1d, 10, 5),
                new BasicMarkerAttributes(Material.GRAY, BasicMarkerShape.HEADING_ARROW, 1d, 10, 5),
                new BasicMarkerAttributes(Material.WHITE, BasicMarkerShape.HEADING_LINE, 1d, 10, 5),
                new BasicMarkerAttributes(Material.RED, BasicMarkerShape.ORIENTED_CONE_LINE, 0.7),
                new BasicMarkerAttributes(Material.YELLOW, BasicMarkerShape.ORIENTED_CYLINDER_LINE, 0.9),
                new BasicMarkerAttributes(Material.CYAN, BasicMarkerShape.ORIENTED_SPHERE_LINE, 0.7),
                new BasicMarkerAttributes(Material.GREEN, BasicMarkerShape.ORIENTED_CONE, 1d),
                new BasicMarkerAttributes(Material.PINK, BasicMarkerShape.ORIENTED_SPHERE, 0.8, 20,20),
                new BasicMarkerAttributes(Material.BLUE, BasicMarkerShape.ORIENTED_CYLINDER, 0.6),
                new BasicMarkerAttributes(Material.RED, BasicMarkerShape.ORIENTED_CUBE, 1d)
            };
	
	
	
	public Ball() {
		markers.add(ballMarker);
	}
	
	public Position getPosition() {
		return this.ballMarker.getPosition();
	}
	
	//move one step toward destination
	public void moveTowardDest() {
		moveOneStepToward(destination);
	}
	
	//when carried by player, use this method to follow the player
	public void followCarrier() {
		ballMarker.setPosition(carrier.playerAnnotation.getPosition());
	}
	
	public void moveOneStepToward (Position position) {
		Position current = this.ballMarker.getPosition();
		double cur_lo = current.longitude.degrees;
		double cur_la = current.latitude.degrees;
		
		double dest_lo = position.longitude.degrees;
		double dest_la = position.latitude.degrees;
		
		
		//make sure the ball takes the short path, for example, when moving from longitude -179 to longitude 179, you can just move 2 degrees instead of 2 * 179 degrees
		if(Math.abs(dest_lo - cur_lo) > 180) {
			if (dest_lo < cur_lo) {
				dest_lo += 360;
			}else {
				cur_lo += 360;
			}
		}
		
		double hypotenuse = Math.sqrt(Math.pow((dest_lo - cur_lo), 2) + Math.pow((dest_la - cur_la), 2));
		
		//move only when hypotenuse > 1, otherwise don't move
		if(hypotenuse > 1) {
			double delta_lo = (dest_lo - cur_lo)/hypotenuse *2;
			double delta_la = (dest_la - cur_la)/hypotenuse *2;
			System.out.println(delta_la);
			current = current.add(Position.fromDegrees(delta_la, delta_lo, 0)); //move forward a bit
			this.ballMarker.setPosition(current);
		} else {
			this.ballState = Ball.STOP;
		}
	}
	
	public void setState(int state) {
		this.ballState = state;
	}
	
	public void setDest(Position dest) {
		this.destination = dest;
	}
    
}