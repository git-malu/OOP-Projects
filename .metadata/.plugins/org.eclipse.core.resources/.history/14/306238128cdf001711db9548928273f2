package lm44_xw47.model;

import java.awt.Color;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Hashtable;
import java.util.Map;

import javax.swing.Timer;


import common.IChatRoom;
import common.IUser;
import gov.nasa.worldwind.WorldWind;
import gov.nasa.worldwind.avlist.AVKey;
import gov.nasa.worldwind.geom.Position;
import gov.nasa.worldwind.layers.MarkerLayer;
import gov.nasa.worldwind.layers.RenderableLayer;
import gov.nasa.worldwind.render.BasicShapeAttributes;
import gov.nasa.worldwind.render.Material;
import gov.nasa.worldwind.render.Path;
import gov.nasa.worldwind.render.ShapeAttributes;
import map.MapLayer;

/**
 * Following defines model for the map.
 * 
 * @author Lu Ma
 * @author Xiaojun Wu
 */
public class MapModel {
	/**
	 * The adapter this model used to communicate with view.
	 */
	IMapModel2MapViewAdapter _adpt;

	/**
	 * The layer of map of this model.
	 */
	MapLayer _layer = new MapLayer();
	RenderableLayer _renderLayer = new RenderableLayer();
	final MarkerLayer _markerLayer = new MarkerLayer();
	
	
	/**
	 * player info
	 */
	IUser meUser;
	Collection<IUser> userList;
	Map<IUser, Player> avatarTable = new Hashtable<IUser, Player>();
	Map<IUser, IChatRoom> userTeamTable;
	
//	ArrayList<Player> playerList = new ArrayList<>();
//	Player mePlayer = new Player("Player 1", Player.NORTH);
//	Player otherPlayer = new Player("Player 2", Player.SOUTH);
	
	/**
	 * ball info
	 */
	Ball ball = new Ball();

	
	/**
	 * timer to update annotations on map
	 */
	private int _timeSlice = 50; // update every 50 milliseconds
	private Timer _timer = new Timer(_timeSlice, 
			(e) -> {
				//players update
				for (IUser eachUser : userList) {
					Player player = avatarTable.get(eachUser);
					if(player.moving) {
						player.moveTowardDest();
						player.pickUpBall(ball); // player will try to pick up a ball on the ground. Flying ball won't be picked up.
						clientBallPick(eachUser);
					}
					
					if (ball.ballState == Ball.FLY) {
						
						if(player.hit(ball)) {
							
							//if hit by the ball
							clientPlayerDie(eachUser);
							_layer.removeAnnotation(player.playerAnnotation);//no longer displayed on layer
							//playerList.remove(player);
						}
					}
				}
				
				
				//ball update
				if(ball.ballState == Ball.FLY) {
					ball.moveTowardDest();
				}else if(ball.ballState == Ball.CARRIED){
					ball.followCarrier();
				}
				
				this._layer.firePropertyChange(gov.nasa.worldwind.avlist.AVKey.LAYER, null, this);
				
			}
	);
	
	/**
	 * Constructor.
	 * 
	 * @param adpt The adapter this model used to communicate with view.
	 */
	public MapModel(IMapModel2MapViewAdapter adpt) {
		_adpt = adpt;
	}

	/**
	 * click shows the position of the mouse clicked place.
	 * 
	 * @param p The position of the mouse clicked place.
	 */
	public void click(Position p) {
		System.out.println("Mouse clicked at: " + p + " altitude = " + p.getAltitude());
		Player mePlayer = avatarTable.get(meUser);
		if(mePlayer.team) {
			//north team
			if (p.latitude.degrees > 0) {
				//move
				mePlayer.setDestination(p);
			} else {
				//shoot if carrying the ball
				if(mePlayer.carrying) {
					mePlayer.shoot(p);
				}
			}
		} else {
			//south team
			if (p.latitude.degrees < 0) {
				//move
				mePlayer.setDestination(p);
			} else {
				//shoot if carrying the ball
				if(mePlayer.carrying) {
					mePlayer.shoot(p);
				}
			}
		}
		
		this._layer.firePropertyChange(gov.nasa.worldwind.avlist.AVKey.LAYER, null, this);
	}
	//client click
	public void receiveClick(IUser clientUser, Position p) {
		Player clientPlayer = avatarTable.get(clientUser);
		if(clientPlayer.team) {
			//north team
			if (p.latitude.degrees > 0) {
				//move
				clientPlayer.setDestination(p);
				clientPlayerMove(clientUser, p);//broadcast
			} else {
				//shoot if carrying the ball
				if(clientPlayer.carrying) {
					
					clientPlayer.shoot(p);
					clientBallShoot(clientUser, p);
				}
			}
		} else {
			//south team
			if (p.latitude.degrees < 0) {
				//move
				clientPlayer.setDestination(p);
				clientPlayerMove(clientUser, p);//broadcast
			} else {
				//shoot if carrying the ball
				if(clientPlayer.carrying) {
					clientPlayer.shoot(p);
					clientBallShoot(clientUser, p);
				}
			}
		}
		
		this._layer.firePropertyChange(gov.nasa.worldwind.avlist.AVKey.LAYER, null, this);
	}
	
	//broadcast
	public void clientPlayerMove(IUser user, Position dest){
		for (IUser eachClientUser : userList) {
//			eachClientUser.receive(data);
		}
	}
	
	public void clientPlayerDie(IUser user){
		for (IUser eachClientUser : userList) {
//			eachClientUser.receive(data);
		}
	}
	
	public void clientBallShoot(IUser user, Position dest){
		for (IUser eachClientUser : userList) {
//			eachClientUser.receive(data);
		}
	}
	
	public void clientBallPick(IUser user){
		for (IUser eachClientUser : userList) {
//			eachClientUser.receive(data);
		}
	}

	/**
	 * Start the map model.
	 */
	public void start() {

//		_layer.addToggleAnnotation("Willy", "Willy Selected!", willy);
//		_layer.addToggleAnnotation("Epcot Center", "Epcot Selected!", epcot, 5000, 1000000);
//		_layer.addAnnotation(new GlobeAnnotation("NYC", nyc));
		
		
		// Create and set an attribute bundle.
        ShapeAttributes pathAttrs = new BasicShapeAttributes();
        pathAttrs.setOutlineMaterial(new Material(Color.green));
        pathAttrs.setOutlineWidth(2d);

        // Create a path, set some of its properties and set its attributes.
        ArrayList<Position> pathPositions = new ArrayList<Position>();
        pathPositions.add(Position.fromDegrees(0, -179, 1e4));
        pathPositions.add(Position.fromDegrees(0, -120, 1e4));
        pathPositions.add(Position.fromDegrees(0, -60, 1e4));
        pathPositions.add(Position.fromDegrees(0, 0, 1e4));
        pathPositions.add(Position.fromDegrees(0, 60, 1e4));
        pathPositions.add(Position.fromDegrees(0, 120, 1e4));
        pathPositions.add(Position.fromDegrees(0, 179, 1e4));
        Path path = new Path(pathPositions);
        path.setAttributes(pathAttrs);
        path.setVisible(true);
        path.setAltitudeMode(WorldWind.RELATIVE_TO_GROUND);
        path.setPathType(AVKey.GREAT_CIRCLE);
        _renderLayer.addRenderable(path);
		
        //add player annotations to the layer
//		playerList.add(mePlayer);//default player
//		playerList.add(otherPlayer);
		
//		for (Player player : playerList) {
//			_layer.addAnnotation(player.playerAnnotation);
//		}
		
		//marker layer
	    _markerLayer.setOverrideMarkerElevation(true);
	    _markerLayer.setKeepSeparated(false);
	    _markerLayer.setElevation(1000d);
	    _markerLayer.setMarkers(ball.markers);
         
         
         
		_adpt.show(_layer);
		_adpt.show(_renderLayer);
		_adpt.show(_markerLayer);
		//_timer.start();
		startGame();
	}
	
	public void startGame() {
		//create player identity for each user
		for (IUser eachUser : userList) {
			Player newPlayer;
			String name = "";
			try {
				name = eachUser.getName();
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			if(userTeamTable.get(eachUser).getName() == "NORTH") {
				newPlayer =  new Player(name, Player.NORTH);
			}else {
				newPlayer =  new Player(name, Player.SOUTH);
			}
			
			newPlayer.setBall(ball);
			avatarTable.put(eachUser, newPlayer);
		}
		
		//put all player annotations on the map
		for (IUser eachUser : userList) {
			Player eachPlayer = avatarTable.get(eachUser);
			_layer.addAnnotation(eachPlayer.playerAnnotation);
		}
		_timer.start();
	}
	
	//when client send click command to server
	public void clientClick(IUser clientUser, Position p){
		Player clientPlayer = avatarTable.get(clientUser);
		
		if(clientPlayer.team) {
			//north team
			if (p.latitude.degrees > 0) {
				//move
				clientPlayer.setDestination(p);
			} else {
				//shoot if carrying the ball
				if(clientPlayer.carrying) {
					clientPlayer.shoot(p);
				}
			}
		} else {
			//south team
			if (p.latitude.degrees < 0) {
				//move
				clientPlayer.setDestination(p);
			} else {
				//shoot if carrying the ball
				if(clientPlayer.carrying) {
					clientPlayer.shoot(p);
				}
			}
		}
		
		this._layer.firePropertyChange(gov.nasa.worldwind.avlist.AVKey.LAYER, null, this);
	}

}

//class Player {
//	String playerName = "Player";
//	GlobeAnnotation playerAnnotation = new GlobeAnnotation(playerName, Position.fromDegrees(1, 1, 0));
//	Position destination = Position.fromDegrees(45, 90, 0);
//	Boolean team = NORTH; // true means north team
//	Boolean moving = false; //whether the player is moving
//	Boolean carrying = false;
//	Ball myBall = null;
//	
//	static Boolean NORTH = true;
//	static Boolean SOUTH = false;
//	
//	public Player() {
//		// TODO Auto-generated constructor stub
//	}
//	public Player(String name, Boolean team) {
//		Position birthPlace;
//		this.playerName = name;
//		this.team = team;
//		if(team) {
//			birthPlace = Position.fromDegrees(45, 90, 0);
//		} else {
//			birthPlace = Position.fromDegrees(-45, 90, 0);
//		}
//		playerAnnotation = new GlobeAnnotation(name, birthPlace);
//		
//	}
//	
//	@Override
//	public String toString() {
//		return playerName;
//	}
//	
//	//set destination and start moving
//	public void setDestination(Position dest) {
//		destination = dest;
//		moving = true;
//	}
//	
//	public void setBall(Ball ball) {
//		myBall = ball;
//	}
//	
//	public Position getPosition() {
//		return this.playerAnnotation.getPosition();
//	}
//	public void pickUpBall(Ball ball) {
//		Position current = this.playerAnnotation.getPosition();
//		double cur_lo = current.longitude.degrees;
//		double cur_la = current.latitude.degrees;
//		Position ballPosition = ball.ballMarker.getPosition();
//		double dest_lo = ballPosition.longitude.degrees;
//		double dest_la = ballPosition.latitude.degrees;
//		double hypotenuse = Math.sqrt(Math.pow((dest_lo - cur_lo), 2) + Math.pow((dest_la - cur_la), 2));
//		if (hypotenuse < 10 && ball.ballState == Ball.STOP) {
//			ball.carrier = this;
//			ball.ballState = Ball.CARRIED;
//			myBall = ball;
//			carrying = true;
//		}
//	}
//	
//	public Boolean hit(Ball ball) {
//		Position current = this.playerAnnotation.getPosition();
//		double cur_lo = current.longitude.degrees;
//		double cur_la = current.latitude.degrees;
//		Position ballPosition = ball.ballMarker.getPosition();
//		double dest_lo = ballPosition.longitude.degrees;
//		double dest_la = ballPosition.latitude.degrees;
//		double hypotenuse = Math.sqrt(Math.pow((dest_lo - cur_lo), 2) + Math.pow((dest_la - cur_la), 2));
//		
//		return hypotenuse < 7 && ball.ballState == Ball.FLY && team != ball.carrier.team; // whether hit by a flying ball from opponent
//		
//	}
//	
//	public void shoot(Position position) {
//		myBall.destination = position;
//		myBall.ballState = Ball.FLY;
//		carrying = false;
//	}
//	
//	public void moveTowardDest() {
//		Position current = this.playerAnnotation.getPosition();
//		double cur_lo = current.longitude.degrees;
//		double cur_la = current.latitude.degrees;
//		
//		double dest_lo = this.destination.longitude.degrees;
//		double dest_la = this.destination.latitude.degrees;
//		
//		
//		//take the short path, for example, move from longitude -179 to longitude 179, you can just move 2 degrees instead of 2 * 179 degrees
//		if(Math.abs(dest_lo - cur_lo) > 180) {
//			if (dest_lo < cur_lo) {
//				dest_lo += 360;
//			}else {
//				cur_lo += 360;
//			}
//		}
//		
//		//move only when hypotenuse > 1, otherwise don't move
//		double hypotenuse = Math.sqrt(Math.pow((dest_lo - cur_lo), 2) + Math.pow((dest_la - cur_la), 2));
//		if(hypotenuse > 1) {
//			double delta_lo = (dest_lo - cur_lo)/hypotenuse *2;
//			double delta_la = (dest_la - cur_la)/hypotenuse *2;
//			System.out.println(delta_la);
//			current = current.add(Position.fromDegrees(delta_la, delta_lo, 0)); //move forward a bit
//			this.playerAnnotation.moveTo(current);
//		} else {
//			moving = false;
//		}
//	}
//}
//
//class Ball {
//	
//	Marker ballMarker = new BasicMarker(Position.fromDegrees(0, 180, 4000), markerAttrs[10]);
//	Position destination = Position.fromDegrees(0, 180, 0);
//	ArrayList<Marker> markers = new ArrayList<Marker>();
//	int ballState = 0; // 0 static; 1 carried; 2 flying
//	static int FLY = 2;
//	static int CARRIED = 1;
//	static int STOP = 0;
//	Player carrier = null;
//	
//	/**
//	 * marker attributes
//	 */
//	private static final MarkerAttributes[] markerAttrs = new BasicMarkerAttributes[]
//            {
//                new BasicMarkerAttributes(Material.BLACK, BasicMarkerShape.SPHERE, 1d, 10, 5),
//                new BasicMarkerAttributes(Material.MAGENTA, BasicMarkerShape.CUBE, 1d, 10, 5),
//                new BasicMarkerAttributes(Material.YELLOW, BasicMarkerShape.CONE, 1d, 10, 5),
//                new BasicMarkerAttributes(Material.LIGHT_GRAY, BasicMarkerShape.CYLINDER, 1d, 10, 5),
//                new BasicMarkerAttributes(Material.GRAY, BasicMarkerShape.HEADING_ARROW, 1d, 10, 5),
//                new BasicMarkerAttributes(Material.WHITE, BasicMarkerShape.HEADING_LINE, 1d, 10, 5),
//                new BasicMarkerAttributes(Material.RED, BasicMarkerShape.ORIENTED_CONE_LINE, 0.7),
//                new BasicMarkerAttributes(Material.YELLOW, BasicMarkerShape.ORIENTED_CYLINDER_LINE, 0.9),
//                new BasicMarkerAttributes(Material.CYAN, BasicMarkerShape.ORIENTED_SPHERE_LINE, 0.7),
//                new BasicMarkerAttributes(Material.GREEN, BasicMarkerShape.ORIENTED_CONE, 1d),
//                new BasicMarkerAttributes(Material.PINK, BasicMarkerShape.ORIENTED_SPHERE, 0.8, 20,20),
//                new BasicMarkerAttributes(Material.BLUE, BasicMarkerShape.ORIENTED_CYLINDER, 0.6),
//                new BasicMarkerAttributes(Material.RED, BasicMarkerShape.ORIENTED_CUBE, 1d)
//            };
//	
//	
//	
//	public Ball() {
//		markers.add(ballMarker);
//	}
//	
//	public Position getPosition() {
//		return this.ballMarker.getPosition();
//	}
//	
//	//move one step toward destination
//	public void moveTowardDest() {
//		moveOneStepToward(destination);
//	}
//	
//	//when carried by player, use this method to follow the player
//	public void followCarrier() {
//		ballMarker.setPosition(carrier.playerAnnotation.getPosition());
//	}
//	
//	public void moveOneStepToward (Position position) {
//		Position current = this.ballMarker.getPosition();
//		double cur_lo = current.longitude.degrees;
//		double cur_la = current.latitude.degrees;
//		
//		double dest_lo = position.longitude.degrees;
//		double dest_la = position.latitude.degrees;
//		
//		
//		//make sure the ball takes the short path, for example, when moving from longitude -179 to longitude 179, you can just move 2 degrees instead of 2 * 179 degrees
//		if(Math.abs(dest_lo - cur_lo) > 180) {
//			if (dest_lo < cur_lo) {
//				dest_lo += 360;
//			}else {
//				cur_lo += 360;
//			}
//		}
//		
//		double hypotenuse = Math.sqrt(Math.pow((dest_lo - cur_lo), 2) + Math.pow((dest_la - cur_la), 2));
//		
//		//move only when hypotenuse > 1, otherwise don't move
//		if(hypotenuse > 1) {
//			double delta_lo = (dest_lo - cur_lo)/hypotenuse *2;
//			double delta_la = (dest_la - cur_la)/hypotenuse *2;
//			System.out.println(delta_la);
//			current = current.add(Position.fromDegrees(delta_la, delta_lo, 0)); //move forward a bit
//			this.ballMarker.setPosition(current);
//		} else {
//			this.ballState = Ball.STOP;
//		}
//	}
//    
//}
